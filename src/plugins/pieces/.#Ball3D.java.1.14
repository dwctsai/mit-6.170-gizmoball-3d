/* @author David Tsai
 * @created on Apr 20, 2003
 */
package plugins.pieces;

import gui.Arena3D;
import gui.Arena3DScene;
import gui.CanvasPanel;
import gui.picking.behaviors.BoundsBehavior;
import gui.picking.behaviors.PickHighlightBehavior;
import gui.picking.behaviors.PickHighlightBehavior2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.BoundingLeaf;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Node;
import javax.media.j3d.PolygonAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import physics3d.Cylinder;
import physics3d.Physics3dObject;
import backend.Ball;

import com.sun.j3d.utils.geometry.Primitive;
import com.sun.j3d.utils.geometry.Sphere;

/**
 *	Ball3D - a piece that represents a 3D ball.
 */
// AF:
//   An ADT representing a ball in Cartesian space.
//   Ball3D has a location, radius, mass, velocity, and appearance.
// RI:
//   lowerCornerLocation != null &&
//   radius != null && radius >= 0 &&
//   mass != null && mass >= 0 &&
//   velocity != null
//   app != null &&
//   isVisible != null

public class Ball3D implements Ball {

	// GENERAL FIELDS
	private static int ID = 0;
	private final int myID;
	private int cachedHashCode = 0;	

	// GRAPHICS FIELDS
	private BranchGroup pieceBranch;
	private TransformGroup pieceTG;
	private TransformGroup pieceTGR;	
	private Transform3D pieceT3D;
	private BranchGroup graphicsSubBranch;
	private BranchGroup containerSubBranch;
	private BoundingBox container;
	private BoundingLeaf containerLeaf;
	private BoundsBehavior m_BoundsBehavior = null;
	private PickHighlightBehavior pickHighlight = null;
	private PickHighlightBehavior2 pickHighlight2 = null;
	private Appearance app;
	private ArrayList allGeometries = new ArrayList();
	private LinkedList rotationQueue = new LinkedList();	

	// PHYSICS FIELDS
	private Point3d location;
	private double radius;
	private Transform3D velocity;
	private double mass;
	private Set physics = new HashSet();
	private Physics3dObject cShape;
	private boolean isPhysical;

	// CONSTRUCTOR 
	/**
	 * @effects Creates a Ball3D from the given parameters.
	 */
	public Ball3D(
		Point3d lowerCornerLocation,
		double radius,
		Transform3D velocity,
		double mass,
		Appearance app) {

		// Check RI.
		if (lowerCornerLocation == null ||
			radius < 0 ||
			velocity == null ||
			mass < 0 ||
			app == null) {
			throw new RuntimeException("Invalid attributes passed in!");
		}
						
		// Initialize fields.
		this.radius = radius;
		this.velocity = velocity;
		this.mass = mass;
		this.app = app;
		this.cShape = null;
		this.isPhysical = true;
		this.myID = Ball3D.ID++;


		// Setup the bounding box.
		container = new BoundingBox();
		container.setLower(-2 * radius, -2 * radius, -2 * radius);
		container.setUpper(2 * radius, 2 * radius, 2 * radius);
		containerLeaf = new BoundingLeaf(container);
		containerLeaf.setCapability(Node.ALLOW_LOCAL_TO_VWORLD_READ);

		// Setup graphics.
		setupGraphics(lowerCornerLocation);
	}

	// GRAPHICAL METHODS

	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void setupGraphics(Point3d lowerCornerLocation) {
		// Initialize the transforms for the graphic.
		pieceTG = new TransformGroup();
		pieceTGR = new TransformGroup();
		pieceTG.addChild(pieceTGR);
		pieceTG.setCapability(TransformGroup.ENABLE_PICK_REPORTING);
		pieceTG.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
		pieceTG.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
		pieceTG.setPickable(true);
		pieceTG.setCollidable(true);		
		
		pieceTGR.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
		pieceTGR.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);		

		pieceT3D = new Transform3D();

		// Create the primitive shapes that make up this piece.
		//		Sphere gSphere = new Sphere((float) radius * 1.0f);
		Sphere gSphere =
			new Sphere(
				(float) radius * 1.0f,
				Primitive.GENERATE_NORMALS | Primitive.GENERATE_TEXTURE_COORDS,
				32,
				app);
		gSphere.setBoundsAutoCompute(false);
		gSphere.setPickable(true);
		gSphere.setCollidable(false);
		gSphere.setCapability(Primitive.ENABLE_APPEARANCE_MODIFY);
		gSphere.setAppearance(app);

		allGeometries.add(gSphere);

		// For highlighting behaviors.
		Shape3D s3d = gSphere.getShape();
		s3d.setCapability(Shape3D.ALLOW_APPEARANCE_READ);
		s3d.setCapability(Shape3D.ALLOW_APPEARANCE_WRITE);

		// Arrange the primitive shapes to create the geometry of the piece.
		graphicsSubBranch = new BranchGroup();

		Transform3D translate = new Transform3D();

		// --add the sphere shape
		Vector3d transVec = new Vector3d(0.0, 0.0, 0.0);
		translate.set(transVec);
		TransformGroup tempTG1 = new TransformGroup(translate);
		tempTG1.addChild(gSphere);
		graphicsSubBranch.addChild(tempTG1);

		// Move this piece to its starting location.
		translate = new Transform3D();
		transVec =
			new Vector3d(
				lowerCornerLocation.x + 2.0 * radius,
				lowerCornerLocation.y + 2.0 * radius,
				lowerCornerLocation.z + 2.0 * radius);
		translate.set(transVec);
		pieceT3D.set(transVec);
		pieceTG.setTransform(pieceT3D);
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void updateGraphics() {
		Point3d lower = new Point3d();
		this.container.getLower(lower);
		Transform3D translate = new Transform3D();
		Vector3d transVec =
			new Vector3d(
				lower.x + 2.0 * radius,
				lower.y + 2.0 * radius,
				lower.z + 2.0 * radius);
		translate.set(transVec);
		pieceT3D.set(transVec);
		pieceTG.setTransform(pieceT3D);
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */
	 public void moveGraphics(Point3d p) {
	 	Transform3D translate = new Transform3D();
	 	pieceTG.getTransform(translate);
	 	Vector3d transVec = new Vector3d(p);
	 	translate.setTranslation(transVec);
	 	pieceTG.setTransform(translate);
	 }
	 

	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void addPiece() {
		// Add the Ball3D to the list of balls.
		Arena3DScene.allBalls.add(this);
		Arena3DScene.TGtoPiece.put(pieceTG, this);

		// Create the main pieceBranch.
		pieceBranch = new BranchGroup();
		pieceBranch.setCapability(BranchGroup.ALLOW_DETACH);

		// Transform pieceTG to the starting position.
		pieceTG.setTransform(pieceT3D);
		pieceBranch.addChild(pieceTG);

		// Complete the graphics sub-branch.
		BranchGroup tempBranch = new BranchGroup();
		pieceBranch.addChild(tempBranch);
		pickHighlight =
			new PickHighlightBehavior(
				graphicsSubBranch,
				CanvasPanel.canvas3D,
				Arena3D.boundsDisable);
		pickHighlight.setEnable(false);
//		graphicsSubBranch.addChild(pickHighlight);
		graphicsSubBranch.compile();
		pieceTGR.addChild(graphicsSubBranch);

		// Create the container sub-branch. 
		containerSubBranch = new BranchGroup();
		m_BoundsBehavior = new BoundsBehavior(container);
		m_BoundsBehavior.setSchedulingBounds(Arena3D.bounds);
		m_BoundsBehavior.addBehaviorToParentGroup(containerSubBranch);
		m_BoundsBehavior.setEnable(false);
		pickHighlight2 =
			new PickHighlightBehavior2(
				containerSubBranch,
				CanvasPanel.canvas3D,
				Arena3D.bounds,
				false);
		pickHighlight2.setEnable(false);
		containerSubBranch.addChild(pickHighlight2);
		containerSubBranch.addChild(containerLeaf);
		containerSubBranch.compile();
		pieceTG.addChild(containerSubBranch);

		// Add pieceBranch branch to Arena3DScene's piecesBranch.	
		pieceBranch.compile();
		Arena3DScene.piecesBranch.addChild(pieceBranch);
	}

	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void removePiece() {
		// Remove this piece's parent BranchGroup from the scene.
		pieceBranch.detach();
		Arena3DScene.piecesBranch.removeChild(pieceBranch);

		// Remove the ball3d from the list of balls.
		Arena3DScene.allBalls.remove(this);
		Arena3DScene.TGtoPiece.remove(pieceTG);
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */
	public Point3d getContainerLowerLocation() {
		Point3d lp = new Point3d();
		container.getLower(lp);
		containerLeaf.getLocalToVworld(pieceT3D);
		pieceT3D.transform(lp);
		
		Point3d up = new Point3d();
		container.getUpper(up);
		containerLeaf.getLocalToVworld(pieceT3D);
		pieceT3D.transform(up);		
		
		lp.x = (lp.x < up.x) ? lp.x : up.x;
		lp.y = (lp.y < up.y) ? lp.y : up.y;
		lp.z = (lp.z < up.z) ? lp.z : up.z;

		return lp;
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */
	public Point3d getContainerUpperLocation() {
		Point3d lp = new Point3d();
		container.getLower(lp);
		containerLeaf.getLocalToVworld(pieceT3D);
		pieceT3D.transform(lp);

		Point3d up = new Point3d();
		container.getUpper(up);
		containerLeaf.getLocalToVworld(pieceT3D);
		pieceT3D.transform(up);
		
		up.x = (lp.x > up.x) ? lp.x : up.x;
		up.y = (lp.y > up.y) ? lp.y : up.y;
		up.z = (lp.z > up.z) ? lp.z : up.z;
				
		return up;
	}

	
	/*
	 *  @see gui.backend.PieceGraphics
	 */
	public BoundingBox getContainerAbsoluteCoord() {
		BoundingBox result = new BoundingBox();
		result.setLower(getContainerLowerLocation());
		result.setUpper(getContainerUpperLocation());
		
		return result;
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateXY90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotZ(Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("XY");
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateXZ90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotY(Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("XZ");		
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateYZ90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotX(Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("ZY");	
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateYX90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotZ(-Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("YX");
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateZX90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotY(-Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("ZX");		
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */	
	public void rotateZY90Graphics() {
		Transform3D temp = new Transform3D();
		temp.rotX(-Math.PI/2.0);
		Vector3d currentTransVec = new Vector3d();
		pieceT3D.get(currentTransVec);
		pieceT3D.setTranslation(new Vector3d());
		pieceT3D.mul(temp);
		pieceT3D.setTranslation(currentTransVec);
		pieceTG.setTransform(pieceT3D);
		
		rotationQueue.add("ZY");	
	}
	
	
	/*
	 * @see gui.backend.PieceGraphics
	 */
	 public Appearance getAppearance() {
		return this.app;
	 }


	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void setAppearance(Appearance app) {
		this.app = app;
		
		for (int i = 0; i < allGeometries.size(); i++) {
			Object currentGeom = allGeometries.get(i);
			if (currentGeom instanceof Primitive) {
				((Primitive) allGeometries.get(i)).setAppearance(app);
			} else if (currentGeom instanceof Shape3D) {
				((Shape3D) allGeometries.get(i)).setAppearance(app);
			}
		}
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void drawWireFrameMode() {
		PolygonAttributes pa = new PolygonAttributes();
		pa.setPolygonMode(PolygonAttributes.POLYGON_LINE);
		app.setPolygonAttributes(pa);

		for (int i = 0; i < allGeometries.size(); i++) {
			Object currentGeom = allGeometries.get(i);
			if (currentGeom instanceof Primitive) {
				((Primitive) allGeometries.get(i)).setAppearance(app);
			} else if (currentGeom instanceof Shape3D) {
				((Shape3D) allGeometries.get(i)).setAppearance(app);
			}
		}
	}

	/*
	 * @see gui.backend.PieceGraphics
	 */
	public void drawFillMode() {
		PolygonAttributes pa = new PolygonAttributes();
		pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
		app.setPolygonAttributes(pa);

		for (int i = 0; i < allGeometries.size(); i++) {
			Object currentGeom = allGeometries.get(i);
			if (currentGeom instanceof Primitive) {
				((Primitive) allGeometries.get(i)).setAppearance(app);
			} else if (currentGeom instanceof Shape3D) {
				((Shape3D) allGeometries.get(i)).setAppearance(app);
			}
		}
	}


	/*
	 * @see gui.backend.PieceGraphics
	 */	 
	 public void enablePieceBehaviors() {
		if (pickHighlight != null && 
			pickHighlight2 != null && 
			m_BoundsBehavior != null &&
			m_BoundsBehavior.cd != null) {

			pickHighlight.setEnable(true);
			pickHighlight2.setEnable(true);
			m_BoundsBehavior.setEnable(true);
			m_BoundsBehavior.cd.setEnable(true);
			
			pickHighlight.setSchedulingBounds(Arena3D.bounds);
			pickHighlight2.setSchedulingBounds(Arena3D.bounds);
			m_BoundsBehavior.setSchedulingBounds(Arena3D.bounds);
			m_BoundsBehavior.cd.setSchedulingBounds(Arena3D.bounds);
								
		}	 		
	 }
	 

	/*
	 * @see gui.backend.PieceGraphics
	 */	 
	 public void disablePieceBehaviors() {
		if (pickHighlight != null && 
			pickHighlight2 != null && 
			m_BoundsBehavior != null &&
			m_BoundsBehavior.cd != null) {

			pickHighlight.setEnable(false);
			pickHighlight2.setEnable(false);
			m_BoundsBehavior.setEnable(false);
			m_BoundsBehavior.cd.setEnable(false);
			
			pickHighlight.setSchedulingBounds(Arena3D.boundsDisable);
			pickHighlight2.setSchedulingBounds(Arena3D.boundsDisable);
			m_BoundsBehavior.setSchedulingBounds(Arena3D.boundsDisable);
			m_BoundsBehavior.cd.setSchedulingBounds(Arena3D.boundsDisable);			
		}
	 }

	// PHYSICS METHODS

	/*
	 * @see engine.backend.PiecePhysics
	 */
	public Point3d getLocation() {
		return new Point3d(this.location);
	}

	/*
	 * @see engine.backend.PiecePhysics
	 */
	public void setLocation(Point3d location) {
		this.location = new Point3d(location);
	}

	/*
	 * @see engine.backend.PiecePhysics
	 */
	public void setupPhysics() {
		// Take connected BoundingBox and get new Boundingbox in absolute coordinates
		Point3d lower = new Point3d(this.getContainerLowerLocation());
		Point3d lowerBackup = new Point3d(lower);
		Point3d upper = new Point3d(this.getContainerUpperLocation());
		Point3d upperBackup = new Point3d(upper);

		this.container = new BoundingBox(lower, upper);

		// Derive center of the ball
		lower.negate();
		upper.add(lower);
		lower.negate();
		upper.scale(0.5);
		lower.add(upper);

		this.location = new Point3d(lower);

		// Derive radius
		lower = lowerBackup;
		upper = upperBackup;

		this.radius = Math.abs((upper.x - lower.x) / 4.0);
		physics3d.Sphere pSphere =
			new physics3d.Sphere(new Vector3d(location), radius, "some Ball");

		physics = new HashSet();
		physics.add(pSphere);

	}

	/* (non-Javadoc)
	 * @see engine.backend.PiecePhysics#update(double)
	 */
	public void update(double timeSlice) {
		// TODO Auto-generated method stub		
	}

	/*
	 * @see engine.backend.PiecePhysics
	 */
	public void updatePhysics(double timeSlice) {
		// Update all physical references
		Point3d location = new Point3d(this.location);

		Point3d lower =
			new Point3d(
				location.x - radius * 2.0,
				location.y - radius * 2.0,
				location.z - radius * 2.0);
		Point3d upper =
			new Point3d(
				location.x + radius * 2.0,
				location.y + radius * 2.0,
				location.z + radius * 2.0);

		this.container = new BoundingBox(lower, upper);

		physics3d.Sphere pSphere =
			new physics3d.Sphere(new Vector3d(location), radius, "some Ball");
		physics = new HashSet();
		physics.add(pSphere);

		// Update all graphical references.
		this.updateGraphics();
	}


	/*
	 * @see engine.backend.PiecePhysics
	 */
	public Set getPhysicalComponents() {
		return Collections.unmodifiableSet(physics);
	}

	/*
	 * @see engine.backend.PiecePhysics
	 */
	public BoundingBox getContainer() {
		return new BoundingBox(this.container);
	}

	/*
	 * @see engine.backend.BallPhysics
	 */
	public double getRadius() {
		return this.radius;
	}

	/*
	 * @see engine.backend.BallPhysics
	 */
	public Transform3D getVelocity() {
		return new Transform3D(this.velocity);
	}

	/*
	 * @see engine.backend.BallPhysics
	 */
	public void setVelocity(Transform3D velocity) {
		this.velocity = new Transform3D(velocity);
	}

	/*
	 * @see engine.backend.BallPhysics
	 */
	public double getMass() {
		return this.mass;
	}


	/*
	 * @see engine.backend.BallPhysics
	 */
	public void setMass(double mass) {
		this.mass = mass;
	}


	/* (non-Javadoc)
	 * @see engine.backend.PiecePhysics#isPhysical()
	 */
	public boolean isPhysical() {
		return this.isPhysical;
	}
	
	
	/* (non-Javadoc)
	 * @see engine.backend.PiecePhysics#setPhysical(boolean)
	 */
	public void setPhysical(boolean isPhysical) {
		this.isPhysical = isPhysical;
	}	

	// OTHER METHODS

	private void prepareForShot() {

		// Graphical Methods

		

		// Physical Methods

		this.setupPhysics();
		// Can I do this since the container may not be set?
		Vector3d newVel = new Vector3d(0, 50, 0);
		Transform3D vel = new Transform3D();
		vel.set(newVel);

		this.setVelocity(vel);

	}

	/**
	 * Creates a command line that represents the state of this gizmo
	 * @return command line string
	 */
	public String unparse() {
		Vector3d v = new Vector3d();
		Transform3D vT3D = getVelocity();
		vT3D.set(v);

		String s = "";
		s = "Ball"
			+ " " + toString()
			+ " " + getContainerLowerLocation().x
			+ " " + getContainerLowerLocation().y
			+ " " + getContainerLowerLocation().z
			+ " " + v.x
			+ " " + v.y
			+ " " + v.z;					    
		
		if (this.rotationQueue.size() > 0) {
			s += "\nRotate " + toString();
			for (int i = 0; i < this.rotationQueue.size(); i++) {
				s = s + " " + rotationQueue.get(i);
			}
		}
				
		return s;		
	}

	/**
	 * Compares the specified object with this for equality.
	 */
	public boolean equals(Object o) {
		if (o != null && o instanceof Ball3D) {
			Ball3D ball = (Ball3D) o;
			return this.myID == ball.myID;
		}

		return false;
	}

	/**
	 * @return A valid hashcode for this.
	 */
	public int hashCode() {
		if (cachedHashCode != 0) {
		  return cachedHashCode;
		}		
		int result = 17;
		result = 37 * result + "Ball3D".hashCode();
		result = 37 * result + this.myID;

		cachedHashCode = result;
		
		return result;
	}

	/**
	 * @return A string representation of this.
	 */
	public String toString() {
		return new String("B" + this.myID);
	}

	/* (non-Javadoc)
	 * @see engine.backend.PiecePhysics#setupPhysicsRotations(double, double, double)
	 */
	public void setupPhysicsRotations(double xbar, double ybar, double zbar) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see engine.backend.PiecePhysics#rotate90Physics(physics3d.Cylinder)
	 */
	public void rotate90Physics(Cylinder axisOfRotation) {
		// TODO Auto-generated method stub
		
	}
}
